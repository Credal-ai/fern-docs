imports:
  common: ./common.yml
service:
  base-path: /v0/catalog
  auth: true
  endpoints:
    uploadDocumentContents:
      path: /uploadDocumentContents
      method: POST
      request:
        name: UploadDocumentContentsRequest
        body:
          properties:
            documentName:
              type: string
              docs: |
                The name of the document you want to upload.
            documentContents:
              type: string
              docs: |
                The full LLM-formatted text contents of the document you want to upload.
            allowedUsersEmailAddresses:
              type: list<string>
              docs: |
                Users allowed to access the document. Unlike Credal's out of the box connectors which reconcile various permissions models from 3rd party software, for custom uploads the caller is responsible for specifying who can access the document and currently flattening groups if applicable. Documents can also be marked as internal public.
            uploadAsUserEmail:
              type: string
              docs: |
                [Legacy] The user on behalf of whom the document should be uploaded. In most cases, this can simply be the email of the developer making the API call. This field will be removed in the future in favor of purely specifying permissions via allowedUsersEmailAddresses.
            documentExternalId:
              type: string
              docs: |
                The external ID of the document. This is typically the ID as it exists in its original external system. Uploads to the same external ID will update the document in Credal.
            documentExternalUrl:
              type: optional<string>
              docs: |
                The external URL of the document you want to upload. If provided Credal will link to this URL.
            customMetadata:
              type: optional<map<string, common.CustomMetadataValue>>
              docs: |
                Optional JSON representing any custom metadata for this document
            collectionId:
              type: optional<string>
              docs: |
                If specified, the document will also be added to the provided document collection. This operation is eventually consistent, meaning the document does not immediately start appearing in searches of that collection due to an asynchronous embedding process. To achieve strong consistency use the `awaitVectorStoreSync` parameter.
            forceUpdate:
              type: optional<boolean>
              docs: |
                If specified, document contents will be re-uploaded and re-embedded even if the document already exists in Credal
            internalPublic:
              type: optional<boolean>
              docs: |
                If specified, document will be accessible to everyone within the organization of the uploader
            awaitVectorStoreSync:
              type: optional<boolean>
              docs: |
                Document uploads are eventually consistent by default. If specified `true` the API will wait for the vector store to be updated before returning. This is useful if you want to ensure that the document is immediately searchable after this call returns.
      response: UploadDocumentResponse
      examples:
        - name: Example1
          request:
            documentName: My Document
            documentContents: Lorem ipsum...
            documentExternalId: 73eead26-d124-4940-b329-5f068a0a8db9
            allowedUsersEmailAddresses: ["jack@credal.ai", "ravin@credal.ai"]
            uploadAsUserEmail: "jack@credal.ai"
          response:
            body:
              documentId: 82e4b12a-6990-45d4-8ebd-85c00e030c24
    syncSourceByUrl:
      path: /syncSourceByUrl
      availability: in-development
      docs: Sync a document from a source URL. Does not support recursive web search. Reach out to a Credal representative for access.
      method: POST
      request: SyncSourceByUrlRequest
      response: SyncSourceByUrlResponse
      examples:
        - name: Example0
          request:
            sourceUrl: "https://drive.google.com/file/d/123456/view"
            uploadAsUserEmail: "ria@credal.ai"
          response:
            body:
              sourceId: 82e4b12a-6990-45d4-8ebd-85c00e030c24
    metadata:
      path: /metadata
      docs: Bulk patch metadata for documents, synced natively by Credal or manual API uploads
      method: PATCH
      request: DocumentMetadataPatchRequest
      examples:
        - name: Example0
          request:
            sources:
              - metadata:
                  Department: HR
                  Country: United States
                resourceIdentifier:
                  type: external-resource-id
                  externalResourceId: 170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr
                  resourceType: GOOGLE_DRIVE_ITEM
              - metadata:
                  Department: Sales
                  Vertical: Healthcare
                resourceIdentifier:
                  type: external-resource-id
                  externalResourceId: "123456"
                  resourceType: ZENDESK_TICKET
            uploadAsUserEmail: ben@credal.ai

types:
  UploadDocumentResponse:
    properties:
      documentId: uuid
  DocumentMetadataPatch:
    properties:
      resourceIdentifier:
        type: common.ResourceIdentifier
        docs: |
          The identifier for the resource you want to patch
      metadata:
        type: map<string, unknown>
        docs: Key-value object of metadata for document. Keys will be merged with any existing values but can also be set to `null` to effectively remove
  DocumentMetadataPatchRequest:
    properties:
      sources: list<DocumentMetadataPatch>
      uploadAsUserEmail: string
  SyncSourceByUrlRequest:
    properties:
      uploadAsUserEmail: string
      sourceUrl: string
  SyncSourceByUrlResponse:
    properties:
      sourceId: uuid
