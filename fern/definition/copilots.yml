service:
  base-path: /v0/copilots
  auth: true
  endpoints:
    sendMessage:
      path: /sendMessage
      method: POST
      request:
        name: SendMessageRequest
        body:
          properties:
            message:
              type: string
              docs: |
                The message you want to send to your copilot.
            userEmail:
              type: string
              docs: |
                The user profile you want to use when sending the message.
            conversationId:
              type: optional<uuid>
              docs: |
                Credal-generated conversation ID for sending follow up messages. Conversation ID is returned after initial message. Optional, to be left off for first messages on new conversations.
      response: SendAgentMessageResponse
      examples:
        - name: Example0
          request:
            message: Is Credal SOC 2 compliant?
            userEmail: ravin@credal.ai
          response:
            body:
              sendChatResult:
                type: ai_response_result
                conversationId: fc938005-92db-411a-88eb-32ca50d5f744
                policy_triggers: []
                response:
                  message: "Based on the context provided, Credal is SOC 2 compliant..."
                  dataChunk: "...SOC 2 is a technical audit that requires companies to establish and follow strict information security policies and procedures. Credal's SOC 2 report is available upon request..."
                warnings: []
                activitySourceIdsForAudit: []
                inserted_audit_log:
                  id: 5842804e-ffbe-4f8d-873e-f007fff93440

types:
  SendAgentMessageResponse:
    properties:
      sendChatResult: SendMessageResponse

  SendMessageResponse:
    union:
      ai_response_result:
        type: MessageReply
        docs: |
          Returned when there is a reply 
          fetched from the copilot.
      blocked_result:
        type: MessageBlocked
        docs: |
          Returned when Credal detects possible 
          infosec violations and blocks the message.

  MessageReply:
    properties:
      policy_triggers: list<PolicyTrigger>
      conversationId: uuid
      response: ResponseChunk
      warnings: list<string>
      activitySourceIdsForAudit: list<string>
      inserted_audit_log: InsertedAuditLog

  ResponseChunk:
    properties:
      message: string
      dataChunk: string

  InsertedAuditLog:
    properties:
      id: uuid

  MessageBlocked:
    properties:
      policy_triggers: list<PolicyTrigger>
      conversationId: uuid
      blocks: list<string>
      warnings: list<string>
      inserted_audit_log: InsertedAuditLog

  PolicyTrigger:
    properties:
      id: string
      name: string
      description: string
